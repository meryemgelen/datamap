{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/location.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../services/marker.service\";\nexport class MapComponent {\n  constructor(locationService, http, markerService) {\n    this.locationService = locationService;\n    this.http = http;\n    this.markerService = markerService;\n    this.note = '';\n    this.selectedCoords = null;\n    this.markersLayer = L.layerGroup();\n    this.locations = []; // API'den gelen veriler için\n  }\n\n  ngOnInit() {\n    try {\n      this.initMap();\n      this.loadLocations();\n    } catch (error) {\n      console.error('Harita yüklenemedi:', error);\n    }\n  }\n  initMap() {\n    this.map = L.map('map').setView([39.92077, 32.85411], 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19\n    }).addTo(this.map);\n    this.markersLayer.addTo(this.map);\n    this.map.on('click', e => this.handleMapClick(e));\n    this.loadMarkersFromService();\n  }\n  loadLocations() {\n    this.http.get('http://localhost:3000/locations').subscribe({\n      next: locations => {\n        this.locations = locations;\n        this.addMarkers();\n      },\n      error: error => console.error('Veri Çekme Hatası:', error)\n    });\n  }\n  addMarkers() {\n    this.markersLayer.clearLayers();\n    this.locations.forEach(location => {\n      const {\n        lat,\n        lng,\n        note\n      } = location;\n      if (lat && lng) {\n        const marker = L.marker([lat, lng], {\n          icon: this.createCustomIcon()\n        });\n        marker.bindPopup(`<b>Not:</b> ${note || 'Not available'}`).addTo(this.markersLayer);\n      }\n    });\n  }\n  createCustomIcon() {\n    return L.icon({\n      iconUrl: '/assets/icons/placeholder.png',\n      iconSize: [25, 25],\n      iconAnchor: [12, 24],\n      popupAnchor: [0, -24]\n    });\n  }\n  handleMapClick(e) {\n    const {\n      lat,\n      lng\n    } = e.latlng;\n    this.selectedCoords = e.latlng;\n    const popupContent = `\n      <div>\n        <strong>Koordinatlar:</strong>\n        <p>Lat: ${lat.toFixed(5)}, Lng: ${lng.toFixed(5)}</p>\n        <textarea id=\"noteInput\" placeholder=\"Not ekleyin...\"></textarea><br>\n        <button id=\"saveNote\">Kaydet</button>\n        <button id=\"deleteNote\">Sil</button>\n      </div>\n    `;\n    const popup = L.popup().setLatLng(e.latlng).setContent(popupContent).openOn(this.map);\n    setTimeout(() => {\n      document.getElementById('saveNote')?.addEventListener('click', () => this.saveNote());\n      document.getElementById('deleteNote')?.addEventListener('click', () => this.deleteNote());\n    });\n  }\n  loadMarkersFromService() {\n    this.markerService.getMarkers().subscribe(markers => {\n      markers.forEach(marker => {\n        L.marker([marker.lat, marker.lng], {\n          icon: this.createCustomIcon()\n        }).addTo(this.map).bindPopup(marker.note || 'No note available');\n      });\n    });\n  }\n  saveNote() {\n    const noteInput = document.getElementById('noteInput')?.value;\n    if (this.selectedCoords && noteInput) {\n      const data = {\n        lat: this.selectedCoords.lat,\n        lng: this.selectedCoords.lng,\n        note: noteInput\n      };\n      this.http.post('/api/locations', data).subscribe({\n        next: () => alert('Not kaydedildi!'),\n        error: err => console.error('Not kaydedilemedi:', err)\n      });\n    } else {\n      alert('Lütfen bir not girin!');\n    }\n  }\n  deleteNote() {\n    if (this.selectedCoords) {\n      this.http.delete(`/api/locations?lat=${this.selectedCoords.lat}&lng=${this.selectedCoords.lng}`).subscribe({\n        next: () => alert('Not silindi!'),\n        error: err => console.error('Not silinemedi:', err)\n      });\n    }\n  }\n  testBackend() {\n    this.http.get('http://localhost:3000/test-db', {\n      responseType: 'text'\n    }).subscribe({\n      next: response => console.log('Backend bağlantısı başarılı:', response),\n      error: error => console.error('Backend bağlantısı hatası:', error)\n    });\n  }\n  static {\n    this.ɵfac = function MapComponent_Factory(t) {\n      return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.LocationService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.MarkerService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      decls: 1,\n      vars: 0,\n      consts: [[\"id\", \"map\", 2, \"height\", \"600px\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0);\n        }\n      },\n      styles: [\"#map[_ngcontent-%COMP%] {\\n  height: 100%;\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWFwL21hcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7RUFDQSxXQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIjbWFwIHtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["L","MapComponent","constructor","locationService","http","markerService","layerGroup","ngOnInit","initMap","loadLocations","error","console","map","setView","tileLayer","maxZoom","addTo","markersLayer","on","e","handleMapClick","loadMarkersFromService","get","subscribe","next","locations","addMarkers","clearLayers","forEach","location","lat","lng","note","marker","icon","createCustomIcon","bindPopup","iconUrl","iconSize","iconAnchor","popupAnchor","latlng","selectedCoords","popupContent","toFixed","popup","setLatLng","setContent","openOn","setTimeout","document","getElementById","addEventListener","saveNote","deleteNote","getMarkers","markers","noteInput","value","data","post","alert","err","delete","testBackend","responseType","response","log","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\meryem\\Desktop\\duyg\\my-angular-map\\src\\app\\map\\map.component.ts","C:\\Users\\meryem\\Desktop\\duyg\\my-angular-map\\src\\app\\map\\map.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as L from 'leaflet';\nimport { LocationService } from '../services/location.service';\nimport { HttpClient } from '@angular/common/http';\nimport { MarkerService } from '../services/marker.service';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss'],\n})\nexport class MapComponent implements OnInit {\n  map!: L.Map;\n  note: string = '';\n  selectedCoords: L.LatLng | null = null;\n  private markersLayer: L.LayerGroup = L.layerGroup();\n\n  locations: any[] = []; // API'den gelen veriler için\n\n  constructor(\n    private locationService: LocationService,\n    private http: HttpClient,\n    private markerService: MarkerService\n  ) {}\n\n  ngOnInit(): void {\n    try {\n      this.initMap();\n      this.loadLocations();\n    } catch (error) {\n      console.error('Harita yüklenemedi:', error);\n    }\n  }\n\n  private initMap(): void {\n    this.map = L.map('map').setView([39.92077, 32.85411], 13);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19,\n    }).addTo(this.map);\n\n    this.markersLayer.addTo(this.map);\n    this.map.on('click', (e: L.LeafletMouseEvent) => this.handleMapClick(e));\n\n    this.loadMarkersFromService();\n  }\n\n  private loadLocations(): void {\n    this.http.get<any[]>('http://localhost:3000/locations').subscribe({\n      next: (locations) => {\n        this.locations = locations;\n        this.addMarkers();\n      },\n      error: (error) => console.error('Veri Çekme Hatası:', error),\n    });\n  }\n\n  private addMarkers(): void {\n    this.markersLayer.clearLayers();\n\n    this.locations.forEach((location) => {\n      const { lat, lng, note } = location;\n      if (lat && lng) {\n        const marker = L.marker([lat, lng], { icon: this.createCustomIcon() });\n        marker.bindPopup(`<b>Not:</b> ${note || 'Not available'}`).addTo(this.markersLayer);\n      }\n    });\n  }\n\n  private createCustomIcon(): L.Icon {\n    return L.icon({\n      iconUrl: '/assets/icons/placeholder.png',\n      iconSize: [25, 25],\n      iconAnchor: [12, 24],\n      popupAnchor: [0, -24],\n    });\n  }\n\n  private handleMapClick(e: L.LeafletMouseEvent): void {\n    const { lat, lng } = e.latlng;\n    this.selectedCoords = e.latlng;\n\n    const popupContent = `\n      <div>\n        <strong>Koordinatlar:</strong>\n        <p>Lat: ${lat.toFixed(5)}, Lng: ${lng.toFixed(5)}</p>\n        <textarea id=\"noteInput\" placeholder=\"Not ekleyin...\"></textarea><br>\n        <button id=\"saveNote\">Kaydet</button>\n        <button id=\"deleteNote\">Sil</button>\n      </div>\n    `;\n\n    const popup = L.popup()\n      .setLatLng(e.latlng)\n      .setContent(popupContent)\n      .openOn(this.map);\n\n    setTimeout(() => {\n      document.getElementById('saveNote')?.addEventListener('click', () => this.saveNote());\n      document.getElementById('deleteNote')?.addEventListener('click', () => this.deleteNote());\n    });\n  }\n\n  private loadMarkersFromService(): void {\n    this.markerService.getMarkers().subscribe((markers) => {\n      markers.forEach((marker) => {\n        L.marker([marker.lat, marker.lng], { icon: this.createCustomIcon() })\n          .addTo(this.map)\n          .bindPopup(marker.note || 'No note available');\n      });\n    });\n  }\n\n  saveNote(): void {\n    const noteInput = (document.getElementById('noteInput') as HTMLTextAreaElement)?.value;\n    if (this.selectedCoords && noteInput) {\n      const data = {\n        lat: this.selectedCoords.lat,\n        lng: this.selectedCoords.lng,\n        note: noteInput,\n      };\n\n      this.http.post('/api/locations', data).subscribe({\n        next: () => alert('Not kaydedildi!'),\n        error: (err) => console.error('Not kaydedilemedi:', err),\n      });\n    } else {\n      alert('Lütfen bir not girin!');\n    }\n  }\n\n  deleteNote(): void {\n    if (this.selectedCoords) {\n      this.http.delete(`/api/locations?lat=${this.selectedCoords.lat}&lng=${this.selectedCoords.lng}`).subscribe({\n        next: () => alert('Not silindi!'),\n        error: (err) => console.error('Not silinemedi:', err),\n      });\n    }\n  }\n\n  testBackend(): void {\n    this.http.get('http://localhost:3000/test-db', { responseType: 'text' }).subscribe({\n      next: (response) => console.log('Backend bağlantısı başarılı:', response),\n      error: (error) => console.error('Backend bağlantısı hatası:', error),\n    });\n  }\n}\n","<div id=\"map\" style=\"height: 600px;\"></div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}