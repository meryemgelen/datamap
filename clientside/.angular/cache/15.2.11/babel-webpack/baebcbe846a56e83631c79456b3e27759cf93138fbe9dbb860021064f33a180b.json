{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../location.service\";\nimport * as i2 from \"@angular/forms\";\nexport class MapComponent {\n  constructor(locationService) {\n    this.locationService = locationService;\n    this.note = '';\n    this.selectedLat = null;\n    this.selectedLng = null;\n  }\n  ngOnInit() {\n    this.initMap();\n    try {\n      this.initMap();\n    } catch (error) {\n      console.error('Harita yüklenemedi:', error);\n    }\n  }\n  initMap() {\n    this.map = L.map('map').setView([39.92077, 32.85411], 6);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19\n    }).addTo(this.map);\n    this.map.on('click', event => {\n      const {\n        lat,\n        lng\n      } = event.latlng;\n      this.selectedLat = lat;\n      this.selectedLng = lng;\n      console.log(`Selected Location: ${lat}, ${lng}`);\n    });\n  }\n  saveLocation() {\n    if (this.selectedLat && this.selectedLng && this.note) {\n      const location = {\n        latitude: this.selectedLat,\n        longitude: this.selectedLng,\n        note: this.note\n      };\n      this.locationService.addLocation(location).subscribe(response => {\n        console.log('Location saved:', response);\n        alert('Konum kaydedildi!');\n      });\n    } else {\n      alert('Lütfen bir konum seçin ve bir not girin!');\n    }\n  }\n  testBackend() {\n    this.http.get('http://localhost:3000/test-db', {\n      responseType: 'text'\n    }).subscribe(response => {\n      console.log('Backend bağlantısı başarılı:', response);\n    }, error => {\n      console.error('Backend bağlantısı hatası:', error);\n    });\n  }\n  static {\n    this.ɵfac = function MapComponent_Factory(t) {\n      return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.LocationService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      decls: 9,\n      vars: 1,\n      consts: [[\"id\", \"map\", 2, \"height\", \"500px\", \"width\", \"100%\"], [\"for\", \"note\"], [\"id\", \"note\", \"placeholder\", \"Bir not ekleyin\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0);\n          i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n          i0.ɵɵtext(3, \"Not:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"input\", 2);\n          i0.ɵɵlistener(\"ngModelChange\", function MapComponent_Template_input_ngModelChange_4_listener($event) {\n            return ctx.note = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_5_listener() {\n            return ctx.saveLocation();\n          });\n          i0.ɵɵtext(6, \"Konumu Kaydet\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_7_listener() {\n            return ctx.testBackend();\n          });\n          i0.ɵɵtext(8, \"Backend Ba\\u011Flant\\u0131s\\u0131n\\u0131 Test Et\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.note);\n        }\n      },\n      dependencies: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n      styles: [\"#map[_ngcontent-%COMP%] {\\n  height: 500px;\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWFwL21hcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7RUFDQSxXQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIjbWFwIHtcclxuICBoZWlnaHQ6IDUwMHB4O1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;;AAQ5B,OAAM,MAAOC,YAAY;EAMrBC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;IAJnC,SAAI,GAAW,EAAE;IACjB,gBAAW,GAAkB,IAAI;IACjC,gBAAW,GAAkB,IAAI;EAEsB;EAEvDC,QAAQ;IACJ,IAAI,CAACC,OAAO,EAAE;IAEd,IAAI;MACF,IAAI,CAACA,OAAO,EAAE;KACjB,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;;EAEjD;EAEAD,OAAO;IACH,IAAI,CAACG,GAAG,GAAGR,CAAC,CAACQ,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;IAExDT,CAAC,CAACU,SAAS,CAAC,oDAAoD,EAAE;MAC9DC,OAAO,EAAE;KACZ,CAAC,CAACC,KAAK,CAAC,IAAI,CAACJ,GAAG,CAAC;IAElB,IAAI,CAACA,GAAG,CAACK,EAAE,CAAC,OAAO,EAAGC,KAAU,IAAI;MAChC,MAAM;QAAEC,GAAG;QAAEC;MAAG,CAAE,GAAGF,KAAK,CAACG,MAAM;MACjC,IAAI,CAACC,WAAW,GAAGH,GAAG;MACtB,IAAI,CAACI,WAAW,GAAGH,GAAG;MACtBT,OAAO,CAACa,GAAG,CAAC,sBAAsBL,GAAG,KAAKC,GAAG,EAAE,CAAC;IACpD,CAAC,CAAC;EACN;EAEAK,YAAY;IACR,IAAI,IAAI,CAACH,WAAW,IAAI,IAAI,CAACC,WAAW,IAAI,IAAI,CAACG,IAAI,EAAE;MACnD,MAAMC,QAAQ,GAAG;QACbC,QAAQ,EAAE,IAAI,CAACN,WAAW;QAC1BO,SAAS,EAAE,IAAI,CAACN,WAAW;QAC3BG,IAAI,EAAE,IAAI,CAACA;OACd;MACD,IAAI,CAACnB,eAAe,CAACuB,WAAW,CAACH,QAAQ,CAAC,CAACI,SAAS,CAAEC,QAAQ,IAAI;QAC9DrB,OAAO,CAACa,GAAG,CAAC,iBAAiB,EAAEQ,QAAQ,CAAC;QACxCC,KAAK,CAAC,mBAAmB,CAAC;MAC9B,CAAC,CAAC;KACL,MAAM;MACHA,KAAK,CAAC,0CAA0C,CAAC;;EAEzD;EAEAC,WAAW;IACT,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,+BAA+B,EAAE;MAAEC,YAAY,EAAE;IAAM,CAAE,CAAC,CACnEN,SAAS,CACLC,QAAQ,IAAI;MACTrB,OAAO,CAACa,GAAG,CAAC,8BAA8B,EAAEQ,QAAQ,CAAC;IACzD,CAAC,EACAtB,KAAK,IAAI;MACNC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACtD,CAAC,CACJ;EACT;;;uBA3DWL,YAAY;IAAA;EAAA;;;YAAZA,YAAY;MAAAiC;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UCTzBC,yBAAwD;UAExDA,2BAAK;UACiBA,oBAAI;UAAAA,iBAAQ;UAC9BA,gCAAoE;UAA7DA;YAAA;UAAA,EAAkB;UAAzBA,iBAAoE;UACpEA,iCAAiC;UAAzBA;YAAA,OAASC,kBAAc;UAAA,EAAC;UAACD,6BAAa;UAAAA,iBAAS;UAE3DA,iCAAgC;UAAxBA;YAAA,OAASC,iBAAa;UAAA,EAAC;UAACD,gEAA4B;UAAAA,iBAAS;;;UAH1DA,eAAkB;UAAlBA,kCAAkB","names":["L","MapComponent","constructor","locationService","ngOnInit","initMap","error","console","map","setView","tileLayer","maxZoom","addTo","on","event","lat","lng","latlng","selectedLat","selectedLng","log","saveLocation","note","location","latitude","longitude","addLocation","subscribe","response","alert","testBackend","http","get","responseType","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\meryem\\Desktop\\duyg\\my-angular-map\\src\\app\\map\\map.component.ts","C:\\Users\\meryem\\Desktop\\duyg\\my-angular-map\\src\\app\\map\\map.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as L from 'leaflet';\nimport { LocationService } from '../location.service';\n\n@Component({\n    selector: 'app-map',\n    templateUrl: './map.component.html',\n    styleUrls: ['./map.component.scss'],\n})\nexport class MapComponent implements OnInit {\n    map: any;\n    note: string = '';\n    selectedLat: number | null = null;\n    selectedLng: number | null = null;\n\n    constructor(private locationService: LocationService) {}\n\n    ngOnInit(): void {\n        this.initMap();\n\n        try {\n          this.initMap();\n      } catch (error) {\n          console.error('Harita yüklenemedi:', error);\n      }\n    }\n\n    initMap(): void {\n        this.map = L.map('map').setView([39.92077, 32.85411], 6);\n\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            maxZoom: 19,\n        }).addTo(this.map);\n\n        this.map.on('click', (event: any) => {\n            const { lat, lng } = event.latlng;\n            this.selectedLat = lat;\n            this.selectedLng = lng;\n            console.log(`Selected Location: ${lat}, ${lng}`);\n        });\n    }\n\n    saveLocation(): void {\n        if (this.selectedLat && this.selectedLng && this.note) {\n            const location = {\n                latitude: this.selectedLat,\n                longitude: this.selectedLng,\n                note: this.note,\n            };\n            this.locationService.addLocation(location).subscribe((response) => {\n                console.log('Location saved:', response);\n                alert('Konum kaydedildi!');\n            });\n        } else {\n            alert('Lütfen bir konum seçin ve bir not girin!');\n        }\n    }\n\n    testBackend(): void {\n      this.http.get('http://localhost:3000/test-db', { responseType: 'text' })\n          .subscribe(\n              (response) => {\n                  console.log('Backend bağlantısı başarılı:', response);\n              },\n              (error) => {\n                  console.error('Backend bağlantısı hatası:', error);\n              }\n          );\n  }\n}\n","<div id=\"map\" style=\"height: 500px; width: 100%;\"></div>\n\n<div>\n    <label for=\"note\">Not:</label>\n    <input [(ngModel)]=\"note\" id=\"note\" placeholder=\"Bir not ekleyin\" />\n    <button (click)=\"saveLocation()\">Konumu Kaydet</button>\n</div>\n<button (click)=\"testBackend()\">Backend Bağlantısını Test Et</button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}