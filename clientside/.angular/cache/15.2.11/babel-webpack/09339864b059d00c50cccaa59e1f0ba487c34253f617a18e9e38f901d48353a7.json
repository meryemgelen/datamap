{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../location.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(locationService, http) {\n      this.locationService = locationService;\n      this.http = http;\n      this.note = '';\n      this.selectedCoords = null;\n    }\n    ngOnInit() {\n      try {\n        this.initMap();\n        this.getLocations(); // Verileri almak için fonksiyonu çağırıyoruz\n      } catch (error) {\n        console.error('Harita yüklenemedi:', error);\n      }\n    }\n    initMap() {\n      this.map = L.map('map').setView([39.92077, 32.85411], 6);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 19\n      }).addTo(this.map);\n      // Click event to show popup\n      this.map.on('click', e => {\n        const {\n          lat,\n          lng\n        } = e.latlng;\n        this.selectedCoords = e.latlng;\n        const popupContent = `\n          <div>\n            <strong>Koordinatlar:</strong>\n            <p>Lat: ${lat.toFixed(5)}, Lng: ${lng.toFixed(5)}</p>\n            <textarea id=\"noteInput\" placeholder=\"Not ekleyin...\"></textarea><br>\n            <button id=\"saveNote\">Kaydet</button>\n            <button id=\"deleteNote\">Sil</button>\n          </div>\n        `;\n        const popup = L.popup().setLatLng(e.latlng).setContent(popupContent).openOn(this.map);\n        // Attach event listeners to buttons inside popup\n        setTimeout(() => {\n          document.getElementById('saveNote')?.addEventListener('click', () => this.saveNote());\n          document.getElementById('deleteNote')?.addEventListener('click', () => this.deleteNote());\n        });\n      });\n    }\n    saveNote() {\n      const noteInput = document.getElementById('noteInput')?.value;\n      if (this.selectedCoords && noteInput) {\n        const data = {\n          lat: this.selectedCoords.lat,\n          lng: this.selectedCoords.lng,\n          note: noteInput\n        };\n        this.http.post('/api/locations', data).subscribe({\n          next: () => alert('Not kaydedildi!'),\n          error: err => console.error('Not kaydedilemedi:', err)\n        });\n      } else {\n        alert('Lütfen bir not girin!');\n      }\n    }\n    deleteNote() {\n      if (this.selectedCoords) {\n        this.http.delete(`/api/locations?lat=${this.selectedCoords.lat}&lng=${this.selectedCoords.lng}`).subscribe({\n          next: () => alert('Not silindi!'),\n          error: err => console.error('Not silinemedi:', err)\n        });\n      }\n    }\n    // Backend'den konumları al\n    getLocations() {\n      this.http.get('http://localhost:3000/locations').subscribe(locations => {\n        locations.forEach(location => {\n          this.addMarker(location); // Her konumu haritada göster\n        });\n      });\n    }\n    // Haritada bir marker ekle\n    addMarker(location) {\n      // Latitude ve Longitude kontrolü\n      if (location.latitude && location.longitude) {\n        const marker = L.marker([location.latitude, location.longitude]).addTo(this.map);\n        marker.bindPopup(`<b>Konum: </b>(${location.latitude}, ${location.longitude})<br><b>Not: </b>${location.note}`);\n      } else {\n        console.error('Geçersiz koordinatlar:', location);\n      }\n    }\n    testBackend() {\n      this.http.get('http://localhost:3000/test-db', {\n        responseType: 'text'\n      }).subscribe(response => {\n        console.log('Backend bağlantısı başarılı:', response);\n      }, error => {\n        console.error('Backend bağlantısı hatası:', error);\n      });\n    }\n    static {\n      this.ɵfac = function MapComponent_Factory(t) {\n        return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.LocationService), i0.ɵɵdirectiveInject(i2.HttpClient));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: MapComponent,\n        selectors: [[\"app-map\"]],\n        decls: 1,\n        vars: 0,\n        consts: [[\"id\", \"map\", 2, \"height\", \"600px\"]],\n        template: function MapComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", 0);\n          }\n        },\n        styles: [\"#map[_ngcontent-%COMP%]{height:100%;width:100%}\"]\n      });\n    }\n  }\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}