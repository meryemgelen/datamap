{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../location.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/forms\";\nexport class MapComponent {\n  constructor(locationService, http) {\n    this.locationService = locationService;\n    this.http = http;\n    this.note = '';\n    this.currentCoordinates = null;\n  }\n  ngOnInit() {\n    try {\n      this.initMap();\n    } catch (error) {\n      console.error('Harita yüklenemedi:', error);\n    }\n  }\n  initMap() {\n    this.map = L.map('map').setView([39.92077, 32.85411], 6);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19\n    }).addTo(this.map);\n    // Harita üzerinde tıklama olayını dinleme\n    this.map.on('click', e => {\n      this.currentCoordinates = {\n        lat: e.latlng.lat,\n        lng: e.latlng.lng\n      };\n      // Marker oluşturma veya mevcut markeri güncelleme\n      if (this.marker) {\n        this.marker.setLatLng(e.latlng);\n      } else {\n        this.marker = L.marker(e.latlng).addTo(this.map);\n      }\n      // Popup oluştur ve göster\n      this.marker.bindPopup(this.createPopupContent()).openPopup();\n    });\n  }\n  // Popup içeriğini oluşturma\n  createPopupContent() {\n    const lat = this.currentCoordinates?.lat.toFixed(5) ?? '';\n    const lng = this.currentCoordinates?.lng.toFixed(5) ?? '';\n    return `\n        <div>\n          <p><strong>Koordinatlar:</strong> ${lat}, ${lng}</p>\n          <textarea id=\"noteInput\" placeholder=\"Bir not ekleyin\">${this.note}</textarea>\n          <button onclick=\"window.saveNote()\">Kaydet</button>\n          <button onclick=\"window.deleteNote()\">Sil</button>\n        </div>\n      `;\n  }\n  // Kaydetme fonksiyonunu globalde tanımla\n  ngAfterViewInit() {\n    window.saveNote = () => this.saveNote();\n    window.deleteNote = () => this.deleteNote();\n  }\n  // Not kaydetme\n  saveNote() {\n    const input = document.getElementById('noteInput');\n    if (input) {\n      this.note = input.value;\n      alert('Not kaydedildi: ' + this.note);\n    }\n  }\n  // Not silme\n  deleteNote() {\n    this.note = '';\n    alert('Not silindi.');\n    if (this.marker) {\n      this.marker.bindPopup(this.createPopupContent()).openPopup();\n    }\n  }\n  testBackend() {\n    this.http.get('http://localhost:3000/test-db', {\n      responseType: 'text'\n    }).subscribe(response => {\n      console.log('Backend bağlantısı başarılı:', response);\n    }, error => {\n      console.error('Backend bağlantısı hatası:', error);\n    });\n  }\n  static {\n    this.ɵfac = function MapComponent_Factory(t) {\n      return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.LocationService), i0.ɵɵdirectiveInject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      decls: 9,\n      vars: 1,\n      consts: [[\"id\", \"map\", 2, \"height\", \"500px\", \"width\", \"100%\"], [\"for\", \"note\"], [\"id\", \"note\", \"placeholder\", \"Bir not ekleyin\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0);\n          i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n          i0.ɵɵtext(3, \"Not:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"input\", 2);\n          i0.ɵɵlistener(\"ngModelChange\", function MapComponent_Template_input_ngModelChange_4_listener($event) {\n            return ctx.note = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_5_listener() {\n            return ctx.saveLocation();\n          });\n          i0.ɵɵtext(6, \"Konumu Kaydet\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_7_listener() {\n            return ctx.testBackend();\n          });\n          i0.ɵɵtext(8, \"Backend Ba\\u011Flant\\u0131s\\u0131n\\u0131 Test Et\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.note);\n        }\n      },\n      dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n      styles: [\"#map[_ngcontent-%COMP%] {\\n  height: 500px;\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWFwL21hcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7RUFDQSxXQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIjbWFwIHtcclxuICBoZWlnaHQ6IDUwMHB4O1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;;;AAQ5B,OAAM,MAAOC,YAAY;EAOrBC,YAAoBC,eAAgC,EAAWC,IAAgB;IAA3D,oBAAe,GAAfD,eAAe;IAA4B,SAAI,GAAJC,IAAI;IAJ9D,SAAI,GAAW,EAAE;IACjB,uBAAkB,GAAwC,IAAI;EAGe;EAElFC,QAAQ;IACN,IAAI;MACF,IAAI,CAACC,OAAO,EAAE;KACjB,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;;EAE/C;EAGQD,OAAO;IACb,IAAI,CAACG,GAAG,GAAGT,CAAC,CAACS,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;IAExDV,CAAC,CAACW,SAAS,CAAC,oDAAoD,EAAE;MAChEC,OAAO,EAAE;KACV,CAAC,CAACC,KAAK,CAAC,IAAI,CAACJ,GAAG,CAAC;IAElB;IACA,IAAI,CAACA,GAAG,CAACK,EAAE,CAAC,OAAO,EAAGC,CAAsB,IAAI;MAC9C,IAAI,CAACC,kBAAkB,GAAG;QAAEC,GAAG,EAAEF,CAAC,CAACG,MAAM,CAACD,GAAG;QAAEE,GAAG,EAAEJ,CAAC,CAACG,MAAM,CAACC;MAAG,CAAE;MAElE;MACA,IAAI,IAAI,CAACC,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAACC,SAAS,CAACN,CAAC,CAACG,MAAM,CAAC;OAChC,MAAM;QACL,IAAI,CAACE,MAAM,GAAGpB,CAAC,CAACoB,MAAM,CAACL,CAAC,CAACG,MAAM,CAAC,CAACL,KAAK,CAAC,IAAI,CAACJ,GAAG,CAAC;;MAGlD;MACA,IAAI,CAACW,MAAM,CAACE,SAAS,CAAC,IAAI,CAACC,kBAAkB,EAAE,CAAC,CAACC,SAAS,EAAE;IAC9D,CAAC,CAAC;EACJ;EAEA;EACQD,kBAAkB;IACxB,MAAMN,GAAG,GAAG,IAAI,CAACD,kBAAkB,EAAEC,GAAG,CAACQ,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE;IACzD,MAAMN,GAAG,GAAG,IAAI,CAACH,kBAAkB,EAAEG,GAAG,CAACM,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE;IACzD,OAAO;;8CAEiCR,GAAG,KAAKE,GAAG;mEACU,IAAI,CAACO,IAAI;;;;OAIrE;EACH;EAEA;EACAC,eAAe;IACZC,MAAc,CAACC,QAAQ,GAAG,MAAM,IAAI,CAACA,QAAQ,EAAE;IAC/CD,MAAc,CAACE,UAAU,GAAG,MAAM,IAAI,CAACA,UAAU,EAAE;EACtD;EAEA;EACAD,QAAQ;IACN,MAAME,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAwB;IACzE,IAAIF,KAAK,EAAE;MACT,IAAI,CAACL,IAAI,GAAGK,KAAK,CAACG,KAAK;MACvBC,KAAK,CAAC,kBAAkB,GAAG,IAAI,CAACT,IAAI,CAAC;;EAEzC;EAEA;EACAI,UAAU;IACR,IAAI,CAACJ,IAAI,GAAG,EAAE;IACdS,KAAK,CAAC,cAAc,CAAC;IACrB,IAAI,IAAI,CAACf,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACE,SAAS,CAAC,IAAI,CAACC,kBAAkB,EAAE,CAAC,CAACC,SAAS,EAAE;;EAEhE;EACAY,WAAW;IACT,IAAI,CAAChC,IAAI,CAACiC,GAAG,CAAC,+BAA+B,EAAE;MAAEC,YAAY,EAAE;IAAM,CAAE,CAAC,CACnEC,SAAS,CACLC,QAAQ,IAAI;MACThC,OAAO,CAACiC,GAAG,CAAC,8BAA8B,EAAED,QAAQ,CAAC;IACzD,CAAC,EACAjC,KAAK,IAAI;MACNC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACtD,CAAC,CACJ;EACT;;;uBAxFWN,YAAY;IAAA;EAAA;;;YAAZA,YAAY;MAAAyC;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UCTzBC,yBAAwD;UAExDA,2BAAK;UACiBA,oBAAI;UAAAA,iBAAQ;UAC9BA,gCAAoE;UAA7DA;YAAA;UAAA,EAAkB;UAAzBA,iBAAoE;UACpEA,iCAAiC;UAAzBA;YAAA,OAASC,kBAAc;UAAA,EAAC;UAACD,6BAAa;UAAAA,iBAAS;UAE3DA,iCAAgC;UAAxBA;YAAA,OAASC,iBAAa;UAAA,EAAC;UAACD,gEAA4B;UAAAA,iBAAS;;;UAH1DA,eAAkB;UAAlBA,kCAAkB","names":["L","MapComponent","constructor","locationService","http","ngOnInit","initMap","error","console","map","setView","tileLayer","maxZoom","addTo","on","e","currentCoordinates","lat","latlng","lng","marker","setLatLng","bindPopup","createPopupContent","openPopup","toFixed","note","ngAfterViewInit","window","saveNote","deleteNote","input","document","getElementById","value","alert","testBackend","get","responseType","subscribe","response","log","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\meryem\\Desktop\\duyg\\my-angular-map\\src\\app\\map\\map.component.ts","C:\\Users\\meryem\\Desktop\\duyg\\my-angular-map\\src\\app\\map\\map.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as L from 'leaflet';\nimport { LocationService } from '../location.service';\nimport { HttpClient } from '@angular/common/http';\n@Component({\n    selector: 'app-map',\n    templateUrl: './map.component.html',\n    styleUrls: ['./map.component.scss'],\n})\nexport class MapComponent implements OnInit {\n  private map!: L.Map;\n  private marker!: L.Marker;\n  public note: string = '';\n  public currentCoordinates: { lat: number; lng: number } | null = null;\n\n\n    constructor(private locationService: LocationService , private http: HttpClient) {}\n\n    ngOnInit(): void {\n      try {\n        this.initMap();\n    } catch (error) {\n        console.error('Harita yüklenemedi:', error);\n    }\n    }\n\n\n    private initMap(): void {\n      this.map = L.map('map').setView([39.92077, 32.85411], 6);\n\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 19,\n      }).addTo(this.map);\n\n      // Harita üzerinde tıklama olayını dinleme\n      this.map.on('click', (e: L.LeafletMouseEvent) => {\n        this.currentCoordinates = { lat: e.latlng.lat, lng: e.latlng.lng };\n\n        // Marker oluşturma veya mevcut markeri güncelleme\n        if (this.marker) {\n          this.marker.setLatLng(e.latlng);\n        } else {\n          this.marker = L.marker(e.latlng).addTo(this.map);\n        }\n\n        // Popup oluştur ve göster\n        this.marker.bindPopup(this.createPopupContent()).openPopup();\n      });\n    }\n\n    // Popup içeriğini oluşturma\n    private createPopupContent(): string {\n      const lat = this.currentCoordinates?.lat.toFixed(5) ?? '';\n      const lng = this.currentCoordinates?.lng.toFixed(5) ?? '';\n      return `\n        <div>\n          <p><strong>Koordinatlar:</strong> ${lat}, ${lng}</p>\n          <textarea id=\"noteInput\" placeholder=\"Bir not ekleyin\">${this.note}</textarea>\n          <button onclick=\"window.saveNote()\">Kaydet</button>\n          <button onclick=\"window.deleteNote()\">Sil</button>\n        </div>\n      `;\n    }\n\n    // Kaydetme fonksiyonunu globalde tanımla\n    ngAfterViewInit(): void {\n      (window as any).saveNote = () => this.saveNote();\n      (window as any).deleteNote = () => this.deleteNote();\n    }\n\n    // Not kaydetme\n    saveNote(): void {\n      const input = document.getElementById('noteInput') as HTMLTextAreaElement;\n      if (input) {\n        this.note = input.value;\n        alert('Not kaydedildi: ' + this.note);\n      }\n    }\n\n    // Not silme\n    deleteNote(): void {\n      this.note = '';\n      alert('Not silindi.');\n      if (this.marker) {\n        this.marker.bindPopup(this.createPopupContent()).openPopup();\n      }\n    }\n    testBackend(): void {\n      this.http.get('http://localhost:3000/test-db', { responseType: 'text' })\n          .subscribe(\n              (response) => {\n                  console.log('Backend bağlantısı başarılı:', response);\n              },\n              (error) => {\n                  console.error('Backend bağlantısı hatası:', error);\n              }\n          );\n  }\n}\n","<div id=\"map\" style=\"height: 500px; width: 100%;\"></div>\n\n<div>\n    <label for=\"note\">Not:</label>\n    <input [(ngModel)]=\"note\" id=\"note\" placeholder=\"Bir not ekleyin\" />\n    <button (click)=\"saveLocation()\">Konumu Kaydet</button>\n</div>\n<button (click)=\"testBackend()\">Backend Bağlantısını Test Et</button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}