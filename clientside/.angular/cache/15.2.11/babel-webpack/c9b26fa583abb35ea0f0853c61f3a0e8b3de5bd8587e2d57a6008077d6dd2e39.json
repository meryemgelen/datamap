{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../location.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class MapComponent {\n  constructor(locationService, http) {\n    this.locationService = locationService;\n    this.http = http;\n    this.note = '';\n    this.selectedCoords = null;\n  }\n  ngOnInit() {\n    try {\n      this.initMap();\n      this.getLocations(); // Verileri almak için fonksiyonu çağırıyoruz\n    } catch (error) {\n      console.error('Harita yüklenemedi:', error);\n    }\n  }\n  initMap() {\n    this.map = L.map('map').setView([39.92077, 32.85411], 6);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19\n    }).addTo(this.map);\n    // Click event to show popup\n    this.map.on('click', e => {\n      const {\n        lat,\n        lng\n      } = e.latlng;\n      this.selectedCoords = e.latlng;\n      const popupContent = `\n          <div>\n            <strong>Koordinatlar:</strong>\n            <p>Lat: ${lat.toFixed(5)}, Lng: ${lng.toFixed(5)}</p>\n            <textarea id=\"noteInput\" placeholder=\"Not ekleyin...\"></textarea><br>\n            <button id=\"saveNote\">Kaydet</button>\n            <button id=\"deleteNote\">Sil</button>\n          </div>\n        `;\n      const popup = L.popup().setLatLng(e.latlng).setContent(popupContent).openOn(this.map);\n      // Attach event listeners to buttons inside popup\n      setTimeout(() => {\n        document.getElementById('saveNote')?.addEventListener('click', () => this.saveNote());\n        document.getElementById('deleteNote')?.addEventListener('click', () => this.deleteNote());\n      });\n    });\n  }\n  saveNote() {\n    const noteInput = document.getElementById('noteInput')?.value;\n    if (this.selectedCoords && noteInput) {\n      const data = {\n        lat: this.selectedCoords.lat,\n        lng: this.selectedCoords.lng,\n        note: noteInput\n      };\n      this.http.post('/api/locations', data).subscribe({\n        next: () => alert('Not kaydedildi!'),\n        error: err => console.error('Not kaydedilemedi:', err)\n      });\n    } else {\n      alert('Lütfen bir not girin!');\n    }\n  }\n  deleteNote() {\n    if (this.selectedCoords) {\n      this.http.delete(`/api/locations?lat=${this.selectedCoords.lat}&lng=${this.selectedCoords.lng}`).subscribe({\n        next: () => alert('Not silindi!'),\n        error: err => console.error('Not silinemedi:', err)\n      });\n    }\n  }\n  // Backend'den konumları al\n  getLocations() {\n    this.http.get('http://localhost:3000/locations').subscribe(locations => {\n      locations.forEach(location => {\n        this.addMarker(location); // Her konumu haritada göster\n      });\n    });\n  }\n  // Haritada bir marker ekle\n  addMarker(location) {\n    // Latitude ve Longitude kontrolü\n    if (location.latitude && location.longitude) {\n      const marker = L.marker([location.latitude, location.longitude]).addTo(this.map);\n      marker.bindPopup(`<b>Konum: </b>(${location.latitude}, ${location.longitude})<br><b>Not: </b>${location.note}`);\n    } else {\n      console.error('Geçersiz koordinatlar:', location);\n    }\n  }\n  testBackend() {\n    this.http.get('http://localhost:3000/test-db', {\n      responseType: 'text'\n    }).subscribe(response => {\n      console.log('Backend bağlantısı başarılı:', response);\n    }, error => {\n      console.error('Backend bağlantısı hatası:', error);\n    });\n  }\n  static {\n    this.ɵfac = function MapComponent_Factory(t) {\n      return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.LocationService), i0.ɵɵdirectiveInject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      decls: 1,\n      vars: 0,\n      consts: [[\"id\", \"map\", 2, \"height\", \"600px\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0);\n        }\n      },\n      styles: [\"#map[_ngcontent-%COMP%] {\\n  height: 100%;\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWFwL21hcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7RUFDQSxXQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIjbWFwIHtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["L","MapComponent","constructor","locationService","http","ngOnInit","initMap","getLocations","error","console","map","setView","tileLayer","maxZoom","addTo","on","e","lat","lng","latlng","selectedCoords","popupContent","toFixed","popup","setLatLng","setContent","openOn","setTimeout","document","getElementById","addEventListener","saveNote","deleteNote","noteInput","value","data","note","post","subscribe","next","alert","err","delete","get","locations","forEach","location","addMarker","latitude","longitude","marker","bindPopup","testBackend","responseType","response","log","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\meryem\\Desktop\\duyg\\my-angular-map\\src\\app\\map\\map.component.ts","C:\\Users\\meryem\\Desktop\\duyg\\my-angular-map\\src\\app\\map\\map.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as L from 'leaflet';\nimport { LocationService } from '../location.service';\nimport { HttpClient } from '@angular/common/http';\n@Component({\n    selector: 'app-map',\n    templateUrl: './map.component.html',\n    styleUrls: ['./map.component.scss'],\n})\nexport class MapComponent implements OnInit {\n  map!: L.Map;\n  note: string = '';\n  selectedCoords: L.LatLng | null = null;\n\n\n    constructor(private locationService: LocationService , private http: HttpClient) {}\n\n    ngOnInit(): void {\n      try {\n        this.initMap();\n        this.getLocations();  // Verileri almak için fonksiyonu çağırıyoruz\n    } catch (error) {\n        console.error('Harita yüklenemedi:', error);\n    }\n    }\n\n\n    initMap(): void {\n      this.map = L.map('map').setView([39.92077, 32.85411], 6);\n\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 19,\n      }).addTo(this.map);\n\n      // Click event to show popup\n      this.map.on('click', (e: L.LeafletMouseEvent) => {\n        const { lat, lng } = e.latlng;\n        this.selectedCoords = e.latlng;\n        const popupContent = `\n          <div>\n            <strong>Koordinatlar:</strong>\n            <p>Lat: ${lat.toFixed(5)}, Lng: ${lng.toFixed(5)}</p>\n            <textarea id=\"noteInput\" placeholder=\"Not ekleyin...\"></textarea><br>\n            <button id=\"saveNote\">Kaydet</button>\n            <button id=\"deleteNote\">Sil</button>\n          </div>\n        `;\n        const popup = L.popup()\n          .setLatLng(e.latlng)\n          .setContent(popupContent)\n          .openOn(this.map);\n\n        // Attach event listeners to buttons inside popup\n        setTimeout(() => {\n          document.getElementById('saveNote')?.addEventListener('click', () => this.saveNote());\n          document.getElementById('deleteNote')?.addEventListener('click', () => this.deleteNote());\n        });\n      });\n    }\n\n    saveNote(): void {\n      const noteInput = (document.getElementById('noteInput') as HTMLTextAreaElement)?.value;\n      if (this.selectedCoords && noteInput) {\n        const data = {\n          lat: this.selectedCoords.lat,\n          lng: this.selectedCoords.lng,\n          note: noteInput,\n        };\n        this.http.post('/api/locations', data).subscribe({\n          next: () => alert('Not kaydedildi!'),\n          error: (err) => console.error('Not kaydedilemedi:', err),\n        });\n      } else {\n        alert('Lütfen bir not girin!');\n      }\n    }\n\n    deleteNote(): void {\n      if (this.selectedCoords) {\n        this.http.delete(`/api/locations?lat=${this.selectedCoords.lat}&lng=${this.selectedCoords.lng}`).subscribe({\n          next: () => alert('Not silindi!'),\n          error: (err) => console.error('Not silinemedi:', err),\n        });\n      }\n    }\n\n     // Backend'den konumları al\n  private getLocations(): void {\n    this.http.get<any[]>('http://localhost:3000/locations').subscribe(locations => {\n      locations.forEach(location => {\n        this.addMarker(location);  // Her konumu haritada göster\n      });\n    });\n  }\n\n// Haritada bir marker ekle\nprivate addMarker(location: any): void {\n  // Latitude ve Longitude kontrolü\n  if (location.latitude && location.longitude) {\n    const marker = L.marker([location.latitude, location.longitude]).addTo(this.map);\n    marker.bindPopup(`<b>Konum: </b>(${location.latitude}, ${location.longitude})<br><b>Not: </b>${location.note}`);\n  } else {\n    console.error('Geçersiz koordinatlar:', location);\n  }\n}\n    testBackend(): void {\n      this.http.get('http://localhost:3000/test-db', { responseType: 'text' })\n          .subscribe(\n              (response) => {\n                  console.log('Backend bağlantısı başarılı:', response);\n              },\n              (error) => {\n                  console.error('Backend bağlantısı hatası:', error);\n              }\n          );\n  }\n}\n","<div id=\"map\" style=\"height: 600px;\"></div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}