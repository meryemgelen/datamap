{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/marker.service\";\nexport class MapComponent {\n  constructor(markerService) {\n    this.markerService = markerService;\n    this.selectedCoords = null;\n    this.markersLayer = L.layerGroup();\n  }\n  ngOnInit() {\n    this.initMap();\n    this.loadMarkers();\n  }\n  initMap() {\n    this.map = L.map('map').setView([39.92077, 32.85411], 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19\n    }).addTo(this.map);\n    this.markersLayer.addTo(this.map);\n    this.map.on('click', e => this.handleMapClick(e));\n  }\n  loadMarkers() {\n    this.markerService.getMarkers().subscribe({\n      next: markers => {\n        markers.forEach(marker => {\n          const {\n            lat,\n            lng,\n            note\n          } = marker;\n          const customMarker = L.marker([lat, lng], {\n            icon: this.createCustomIcon()\n          });\n          customMarker.bindPopup(`<b>Koordinatlar:</b> Lat: ${lat}, Lng: ${lng}<br><b>Not:</b> ${note || 'Belirtilmedi'}`).addTo(this.markersLayer);\n        });\n      },\n      error: err => console.error('Marker yükleme hatası:', err)\n    });\n  }\n  handleMapClick(e) {\n    const {\n      lat,\n      lng\n    } = e.latlng;\n    this.selectedCoords = e.latlng;\n    const popupContent = `\n      <div>\n        <strong>Koordinatlar:</strong> <p>Lat: ${lat.toFixed(5)}, Lng: ${lng.toFixed(5)}</p>\n        <textarea id=\"noteInput\" placeholder=\"Not ekleyin...\"></textarea><br>\n        <button id=\"saveNote\">Kaydet</button>\n        <button id=\"deleteMarker\">Sil</button>\n      </div>\n    `;\n    const popup = L.popup().setLatLng(e.latlng).setContent(popupContent).openOn(this.map);\n    setTimeout(() => {\n      document.getElementById('saveNote')?.addEventListener('click', () => this.saveNote());\n      document.getElementById('deleteMarker')?.addEventListener('click', () => this.deleteMarker());\n    });\n  }\n  saveNote() {\n    const noteInput = document.getElementById('noteInput')?.value;\n    if (this.selectedCoords && noteInput) {\n      const data = {\n        lat: this.selectedCoords.lat,\n        lng: this.selectedCoords.lng,\n        note: noteInput\n      };\n      this.markerService.addMarker(data).subscribe({\n        next: () => {\n          alert('Not başarıyla kaydedildi!');\n          this.loadMarkers();\n        },\n        error: err => console.error('Not kaydedilemedi:', err)\n      });\n    } else {\n      alert('Lütfen bir not girin!');\n    }\n  }\n  deleteMarker() {\n    if (this.selectedCoords) {\n      this.markerService.deleteMarker(this.selectedCoords.lat, this.selectedCoords.lng).subscribe({\n        next: () => {\n          alert('Marker başarıyla silindi!');\n          this.loadMarkers();\n        },\n        error: err => console.error('Marker silinemedi:', err)\n      });\n    }\n  }\n  createCustomIcon() {\n    return L.icon({\n      iconUrl: '/assets/icons/placeholder.png',\n      iconSize: [25, 25],\n      iconAnchor: [12, 24],\n      popupAnchor: [0, -24]\n    });\n  }\n  static {\n    this.ɵfac = function MapComponent_Factory(t) {\n      return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.MarkerService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      decls: 1,\n      vars: 0,\n      consts: [[\"id\", \"map\", 2, \"height\", \"600px\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0);\n        }\n      },\n      styles: [\"#map[_ngcontent-%COMP%] {\\n  height: 100%;\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWFwL21hcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7RUFDQSxXQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIjbWFwIHtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["L","MapComponent","constructor","markerService","layerGroup","ngOnInit","initMap","loadMarkers","map","setView","tileLayer","maxZoom","addTo","markersLayer","on","e","handleMapClick","getMarkers","subscribe","next","markers","forEach","marker","lat","lng","note","customMarker","icon","createCustomIcon","bindPopup","error","err","console","latlng","selectedCoords","popupContent","toFixed","popup","setLatLng","setContent","openOn","setTimeout","document","getElementById","addEventListener","saveNote","deleteMarker","noteInput","value","data","addMarker","alert","iconUrl","iconSize","iconAnchor","popupAnchor","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\meryem\\Desktop\\duyg\\my-angular-map\\src\\app\\map\\map.component.ts","C:\\Users\\meryem\\Desktop\\duyg\\my-angular-map\\src\\app\\map\\map.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as L from 'leaflet';\nimport { MarkerService } from '../services/marker.service';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss'],\n})\nexport class MapComponent implements OnInit {\n  map!: L.Map;\n  selectedCoords: L.LatLng | null = null;\n  private markersLayer: L.LayerGroup = L.layerGroup();\n\n  constructor(private markerService: MarkerService) {}\n\n  ngOnInit(): void {\n    this.initMap();\n    this.loadMarkers();\n  }\n\n  private initMap(): void {\n    this.map = L.map('map').setView([39.92077, 32.85411], 13);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19,\n    }).addTo(this.map);\n\n    this.markersLayer.addTo(this.map);\n\n    this.map.on('click', (e: L.LeafletMouseEvent) => this.handleMapClick(e));\n  }\n\n  private loadMarkers(): void {\n    this.markerService.getMarkers().subscribe({\n      next: (markers) => {\n        markers.forEach((marker) => {\n          const { lat, lng, note } = marker;\n          const customMarker = L.marker([lat, lng], { icon: this.createCustomIcon() });\n          customMarker\n            .bindPopup(`<b>Koordinatlar:</b> Lat: ${lat}, Lng: ${lng}<br><b>Not:</b> ${note || 'Belirtilmedi'}`)\n            .addTo(this.markersLayer);\n        });\n      },\n      error: (err) => console.error('Marker yükleme hatası:', err),\n    });\n  }\n\n  private handleMapClick(e: L.LeafletMouseEvent): void {\n    const { lat, lng } = e.latlng;\n    this.selectedCoords = e.latlng;\n\n    const popupContent = `\n      <div>\n        <strong>Koordinatlar:</strong> <p>Lat: ${lat.toFixed(5)}, Lng: ${lng.toFixed(5)}</p>\n        <textarea id=\"noteInput\" placeholder=\"Not ekleyin...\"></textarea><br>\n        <button id=\"saveNote\">Kaydet</button>\n        <button id=\"deleteMarker\">Sil</button>\n      </div>\n    `;\n\n    const popup = L.popup()\n      .setLatLng(e.latlng)\n      .setContent(popupContent)\n      .openOn(this.map);\n\n    setTimeout(() => {\n      document.getElementById('saveNote')?.addEventListener('click', () => this.saveNote());\n      document.getElementById('deleteMarker')?.addEventListener('click', () => this.deleteMarker());\n    });\n  }\n\n  private saveNote(): void {\n    const noteInput = (document.getElementById('noteInput') as HTMLTextAreaElement)?.value;\n    if (this.selectedCoords && noteInput) {\n      const data = {\n        lat: this.selectedCoords.lat,\n        lng: this.selectedCoords.lng,\n        note: noteInput,\n      };\n\n      this.markerService.addMarker(data).subscribe({\n        next: () => {\n          alert('Not başarıyla kaydedildi!');\n          this.loadMarkers();\n        },\n        error: (err) => console.error('Not kaydedilemedi:', err),\n      });\n    } else {\n      alert('Lütfen bir not girin!');\n    }\n  }\n\n  private deleteMarker(): void {\n    if (this.selectedCoords) {\n      this.markerService.deleteMarker(this.selectedCoords.lat, this.selectedCoords.lng).subscribe({\n        next: () => {\n          alert('Marker başarıyla silindi!');\n          this.loadMarkers();\n        },\n        error: (err) => console.error('Marker silinemedi:', err),\n      });\n    }\n  }\n\n  private createCustomIcon(): L.Icon {\n    return L.icon({\n      iconUrl: '/assets/icons/placeholder.png',\n      iconSize: [25, 25],\n      iconAnchor: [12, 24],\n      popupAnchor: [0, -24],\n    });\n  }\n}\n","<div id=\"map\" style=\"height: 600px;\"></div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}